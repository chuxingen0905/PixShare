import { signUp, signIn, signOut, confirmSignUp, resendSignUpCode, resetPassword, confirmResetPassword, getCurrentUser, fetchAuthSession } from 'aws-amplify/auth';
import awsService from './aws.js';

class AuthService {
  // Sign up new user
  async register(email, password, username, name = '') {
    try {
      const { isSignUpComplete, userId, nextStep } = await signUp({
        username, // Use the username from the form, not email
        password,
        options: {
          userAttributes: {
            email,
            name
          },
          autoSignIn: false // Changed to false to prevent "already signed in" errors
        }
      });

      if (isSignUpComplete) {
        // Create user profile in database
        await awsService.createUserProfile({
          id: userId,
          email,
          username,
          name
        });
      }

      return {
        success: true,
        isSignUpComplete,
        nextStep,
        message: isSignUpComplete 
          ? 'Registration successful!' 
          : 'Please check your email for verification code.'
      };
    } catch (error) {
      console.error('Registration error:', error);
      return {
        success: false,
        error: error.message || 'Registration failed'
      };
    }
  }

  // Confirm email verification
  async confirmEmail(username, code) {
    try {
      await confirmSignUp({
        username, // Use the username, not email
        confirmationCode: code
      });
      
      // Sign out any current user session to prevent "already signed in" errors
      try {
        await signOut();
      } catch (signOutError) {
        console.log('Sign out after confirmation:', signOutError);
        // Continue even if sign out fails
      }

      return {
        success: true,
        message: 'Email verified successfully!'
      };
    } catch (error) {
      console.error('Email confirmation error:', error);
      return {
        success: false,
        error: error.message || 'Email verification failed'
      };
    }
  }

  // Resend verification code
  async resendCode(username) {
    try {
      await resendSignUpCode({
        username // Use the username, not email
      });

      return {
        success: true,
        message: 'Verification code sent!'
      };
    } catch (error) {
      console.error('Resend code error:', error);
      return {
        success: false,
        error: error.message || 'Failed to resend code'
      };
    }
  }

  // Sign in user
  async login(email, password) {
    try {
      // First check if there's already a signed-in user and sign them out
      try {
        await this.handleAlreadySignedInError();
      } catch (error) {
        // Ignore errors from this operation
      }

      const { isSignedIn, nextStep } = await signIn({
        username: email,
        password
      });

      if (isSignedIn) {
        const user = await this.getCurrentUser();
        return {
          success: true,
          user,
          message: 'Login successful!'
        };
      } else {
        return {
          success: false,
          nextStep,
          message: 'Additional steps required'
        };
      }
    } catch (error) {
      console.error('Login error:', error);
      
      // If we get the "already signed in" error, try to sign out and login again
      if (error.message && error.message.includes('There is already a signed in user')) {
        try {
          const signedOut = await this.handleAlreadySignedInError();
          if (signedOut) {
            // Try login again
            return await this.login(email, password);
          }
        } catch (retryError) {
          console.error('Error during retry login:', retryError);
        }
      }
      
      return {
        success: false,
        error: error.message || 'Login failed'
      };
    }
  }

  // Sign out user
  async logout() {
    try {
      await signOut();
      return {
        success: true,
        message: 'Logged out successfully!'
      };
    } catch (error) {
      console.error('Logout error:', error);
      return {
        success: false,
        error: error.message || 'Logout failed'
      };
    }
  }

  // Get current authenticated user
  async getCurrentUser() {
    try {
      const user = await getCurrentUser();
      return {
        id: user.userId,
        email: user.signInDetails?.loginId || user.username,
        username: user.username,
        attributes: user.attributes || {}
      };
    } catch (error) {
      console.error('Get current user error:', error);
      return null;
    }
  }

  // Check if a user is authenticated
  async isAuthenticated() {
    try {
      await getCurrentUser();
      return true;
    } catch (error) {
      return false;
    }
  }

  // Initiate forgot password flow
  async forgotPassword(email) {
    try {
      await resetPassword({
        username: email
      });
      
      return {
        success: true,
        message: 'Password reset code sent to your email!'
      };
    } catch (error) {
      console.error('Forgot password error:', error);
      return {
        success: false,
        error: error.message || 'Failed to send reset code'
      };
    }
  }

  // Confirm new password
  async confirmPasswordReset(email, code, newPassword) {
    try {
      await confirmResetPassword({
        username: email,
        confirmationCode: code,
        newPassword
      });
      
      return {
        success: true,
        message: 'Password reset successfully!'
      };
    } catch (error) {
      console.error('Confirm password reset error:', error);
      return {
        success: false,
        error: error.message || 'Failed to reset password'
      };
    }
  }
  
  // Get the current auth session (tokens)
  async getSession() {
    try {
      const session = await fetchAuthSession();
      return session;
    } catch (error) {
      console.error('Get session error:', error);
      return null;
    }
  }
  
  // Helper function to handle "already signed in" error
  async handleAlreadySignedInError() {
    try {
      await signOut();
      console.log('Signed out existing user session');
      return true;
    } catch (error) {
      console.error('Error signing out existing session:', error);
      return false;
    }
  }
}

export default new AuthService();
